<% if (canRender(["model"])) { -%>
const <%= $name.toPascalCase() %> = require("./../models/<%= $name.toKebabCase() %>.model");
<% } -%>
const CustomError = require("./../utils/custom-error");


class <%= $name.toPascalCase() %>Service {
<%# :::::::::::::::::::: CREATE :::::::::::::::::::: -%>
<% if (canRender(["crud", "create"])) { -%>

  async create(data) {
<% if (canRender(["model"])) { -%>
    return await new <%= $name.toPascalCase() %>(data).save();
<% } -%>
<% if (!canRender(["model"])) { -%>
    // create
    return null
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: GET ALL :::::::::::::::::::: -%>
<% if (canRender(["crud", "read"])) { -%>

  async getAll() {
<% if (canRender(["model"])) { -%>
    return await <%= $name.toPascalCase() %>.find({});
<% } -%>
<% if (!canRender(["model"])) { -%>
    // get all
    return null
<% } -%>
  }
<%# :::::::::::::::::::: GET ONE :::::::::::::::::::: %>
  async getOne(<%= $name.toCamelCase() %>Id) {
<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toCamelCase() %>Id });
    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toPascalCase() %> does not exists");

    return <%= $name.toCamelCase() %>
<% } -%>
<% if (!canRender(["model"])) { -%>
    // get one
    return null
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: UPDATE :::::::::::::::::::: -%>
<% if (canRender(["crud", "update"])) { -%>

  async update(<%= $name.toCamelCase() %>Id, data) {
<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findByIdAndUpdate(
    { _id: <%= $name.toCamelCase() %>Id },
    { $set: data },
    { new: true }
    );

    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toPascalCase() %> dosen't exist", 404);

    return <%= $name.toCamelCase() %>;
<% } -%>
<% if (!canRender(["model"])) { -%>
    // update
    return null
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: DELETE :::::::::::::::::::: -%>
<% if (canRender(["crud", "delete"])) { -%>

  async delete(<%= $name.toCamelCase() %>Id) {
<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toCamelCase() %>Id });
    <%= $name.toCamelCase() %>.remove()
    return <%= $name.toCamelCase() %>
<% } -%>
<% if (!canRender(["model"])) { -%>
    // delete
    return null
<% } -%>
  }
<% } -%>

}


module.exports = new <%= $name.toPascalCase() %>Service();