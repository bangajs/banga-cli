<% if (canRender(["model"])) { -%>
const <%= $name.toPascalCase() %> = require("./../models/<%= $name.toKebabCase() %>.model");
<% } -%>
const { CustomError } = require("./../utils");


class <%= $name.toPascalCase() %>Service {
<%# :::::::::::::::::::: CREATE :::::::::::::::::::: -%>
<% if (canRender(["crud", "create"])) { -%>

  async create(data) {
<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await new <%= $name.toPascalCase() %>(data).save();

    return <%= $name.toCamelCase() %>
<% } -%>
<% if (!canRender(["model"])) { -%>
    // Write your code here
    
    return
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: FIND ALL :::::::::::::::::::: -%>
<% if (canRender(["crud", "read"])) { -%>

  async findAll(data) {
<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %>s = await <%= $name.toPascalCase() %>.find({});

    return <%= $name.toCamelCase() %>s
<% } -%>
<% if (!canRender(["model"])) { -%>
    // Write your code here

    return
<% } -%>
  }
<%# :::::::::::::::::::: FIND ONE :::::::::::::::::::: %>
  async findOne(data) {
    const { <%= $name.toSnakeCase() %>_id } = data

<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toSnakeCase() %>_id });
    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toSentenceCase() %> does not exists");

    return <%= $name.toCamelCase() %>
<% } -%>
<% if (!canRender(["model"])) { -%>
    // Write your code here

    return
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: UPDATE ONE :::::::::::::::::::: -%>
<% if (canRender(["crud", "update"])) { -%>

  async updateOne(data) {
    const { <%= $name.toSnakeCase() %>_id } = data

<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findByIdAndUpdate(
      { _id: <%= $name.toSnakeCase() %>_id },
      { $set: data }
    );
    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toSentenceCase() %> dosen't exist", 404);

    return <%= $name.toCamelCase() %>;
<% } -%>
<% if (!canRender(["model"])) { -%>
    // Write your code here

    return
<% } -%>
  }
<% } -%>
<%# :::::::::::::::::::: DELETE ONE :::::::::::::::::::: -%>
<% if (canRender(["crud", "delete"])) { -%>

  async deleteOne(data) {
    const { <%= $name.toSnakeCase() %>_id } = data

<% if (canRender(["model"])) { -%>
    const <%= $name.toCamelCase() %> = await <%= $name.toPascalCase() %>.findOne({ _id: <%= $name.toSnakeCase() %>_id });
    if (!<%= $name.toCamelCase() %>) throw new CustomError("<%= $name.toSentenceCase() %> dosen't exist", 404);
    <%= $name.toCamelCase() %>.remove()

    return <%= $name.toCamelCase() %>
<% } -%>
<% if (!canRender(["model"])) { -%>
    // Write your code here

    return
<% } -%>
  }
<% } -%>

}


module.exports = new <%= $name.toPascalCase() %>Service();