<% if (canRender(["service"])) { -%>
const <%= $name.toPascalCase() %>Serv = require("./../services/<%= $name.toKebabCase() %>.service");
<% } -%>
const response = require("./../utils/response");


class <%= $name.toPascalCase() %>Contoller {
<%# ::::::::::::::::::::::::::::: CREATE ::::::::::::::::::::::::::::: -%>
<% if (canRender(["crud", "create"])) { -%>

  async create(req, res) {
<% if (canRender(["service"])) { -%>
    const result = await <%= $name.toPascalCase() %>Serv.create(req.body);
    res.status(201).send(response("<%= $name.toSentenceCase() %> created", result));
<% } -%>
<% if (!canRender(["service"])) { -%>
    // Write your code here

    res.status(201).send(response("<%= $name.toSentenceCase() %> created", null));
<% } -%>
  } 
<% } -%>
<%# ::::::::::::::::::::::::::::: FIND ALL ::::::::::::::::::::::::::::: -%>
<% if (canRender(["crud", "read"])) { -%>

  async findAll(req, res) {
<% if (canRender(["service"])) { -%>
    const result = await <%= $name.toPascalCase() %>Serv.findAll(req.body);
    res.status(200).send(response("all <%= $name.toSentenceCase() %>", result));
<% } -%>
<% if (!canRender(["service"])) { -%>
    // Write your code here
    res.status(200).send(response("all <%= $name.toSentenceCase() %>", null));
<% } -%>
  }
<%# ::::::::::::::::::::::::::::: FIND ONE ::::::::::::::::::::::::::::: %>
  async findOne(req, res) {
<% if (canRender(["service"])) { -%>
    const result = await <%= $name.toPascalCase() %>Serv.findOne(req.body);
    res.status(200).send(response("<%= $name.toSentenceCase() %> data", result));
<% } -%>
<% if (!canRender(["service"])) { -%>
    // Write your code here

    res.status(200).send(response("<%= $name.toSentenceCase() %> data", null));
<% } -%>
  }
<% } -%>
<%# ::::::::::::::::::::::::::::: UPDATE ONE ::::::::::::::::::::::::::::: -%>
<% if (canRender(["crud", "update"])) { -%>

  async updateOne(req, res) {
<% if (canRender(["service"])) { -%>
    const result = await <%= $name.toPascalCase() %>Serv.updateOne(req.body);
    res.status(200).send(response("<%= $name.toSentenceCase() %> updated", result));
<% } -%>
<% if (!canRender(["service"])) { -%>
    // Write your code here

    res.status(200).send(response("<%= $name.toSentenceCase() %> updated", null));
<% } -%>
  }
<% } -%>
<%# ::::::::::::::::::::::::::::: DELETE ONE ::::::::::::::::::::::::::::: -%>
<% if (canRender(["crud", "delete"])) { -%>
  
  async deleteOne(req, res) {
<% if (canRender(["service"])) { -%>
    const result = await <%= $name.toPascalCase() %>Serv.deleteOne(req.body);
    res.status(200).send(response("<%= $name.toSentenceCase() %> deleted", result));
<% } -%>
<% if (!canRender(["service"])) { -%>
    // Write your code here

    res.status(200).send(response("<%= $name.toSentenceCase() %> deleted", null));
<% } -%>
  }
<% } -%>

}


module.exports = new <%= $name.toPascalCase() %>Contoller();
