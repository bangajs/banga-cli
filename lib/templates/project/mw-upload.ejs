const fs = require('fs')
const multer = require('multer')
const { v4 } = require("uuid")
const { CustomError } = require('./../utils');

let initialReqBody

const upload = multer({
  storage: multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, 'uploads')  // Store files in "/uploads" folder
    },
    filename: (req, file, cb) => {
      // Generate unique filename from current date and shortid
      const file_ext = file.originalname.split(".").pop();
      let filename = `${v4()}-${new Date().getTime()}.${file_ext}`;

      cb(null, filename)
    }
  }),

  fileFilter: (req, file, cb) => {
    //Accepted file types
    const mime_types = ["image/jpeg", "image/png", "image/gif", "image/svg+xml", "image/webp", "image/tiff", "audio/webm", "audio/mpeg", "video/webm", "video/x-msvideo", "video/mp4", "application/pdf", "application/vnd.ms-powerpoint", "application/x-tar"]

    //Check if file type is accepted
    if (mime_types.includes(file.mimetype)) {
      cb(null, true)
    } else {
      cb(new CustomError("Invalid file type", 400))
    }
  },

  limits: {
    fileSize: 100 * 1024 * 1024, // Maximum file size of 100mb
    files: 20, // Maximum number of file fields
  },
})

/**
 *  Adds the file property to the req.body
 * @param {*} fieldOpt  Multer Field Options
 * @returns 
 */
function addFieldsToBody(fieldOpt) {

  return async (req, res, next) => {

    // Handles Upload.fields()
    if (req.files && typeof req.files === 'object') {
      for (const field of Object.keys(req.files)) {
        const maxCount = fieldOpt.find((fieldObj, i) => fieldObj.name == field).maxCount

        if (Array.isArray(req.files[field]) && maxCount == 1) {
          // If max no of files is 1 then save as string instead of array
          const filePath = req.files[field][0].path
          req.body[field] = filePath
        } else {
          const urls = []
          for (const file of req.files[field]) {
            const filePath = `${process.cwd()}/${file.path}`
            const newPath = filePath
            urls.push(newPath)
          }
          req.body[field] = urls
        }
      }
    }

    // Handles Upload.array()
    if (req.files && req.files.constructor == Array) {
      const urls = []
      for (const file of req.files) {
        const filePath = `${process.cwd()}/${file.path}`
        const newPath = filePath
        urls.push(newPath)
      }

      req.body[fieldOpt] = urls
    }

    // Handles Upload.single()
    if (req.file) {
      const filePath = req.file.path
      const fieldName = req.file.fieldname

      req.body[fieldOpt] = filePath
    }

    // Preserve inital request body
    req.body = { ...req.body, ...initialReqBody }

    next();
  }
}


module.exports = (type = "fields", fieldOpt) => {
  return [
    (req, res, next) => {
      // Preserve req body before multer overwrites it
      initialReqBody = req.body
      next()
    },
    upload[type](fieldOpt),
    addFieldsToBody(fieldOpt)
  ]
}